version: '3.8'
networks:
  default:
    name: my-network
    driver: bridge

services:
  api-gateway-service:
    build: ./api_gateway_service
    container_name: api-gateway-service
    ports:
      - "8085:8085"
    depends_on:
      - auth-service
      - chat-service
      - message-service
      - notification-service
      - file-storage-service

  auth-service:
    build: ./auth_service
    container_name: auth-service
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-auth:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=DBPASSWORD
      - JWT_SECRET=123456781234567812345678123456781234567812345678
    depends_on:
      - db-auth

  chat-service:
    build: ./chat_service
    container_name: chat-service
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - KAFKA_ADVERTISED_LISTENERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=123456781234567812345678123456781234567812345678
    depends_on:
      - kafka
      - redis

  message-service:
    build: ./message_service
    container_name: message-service
    ports:
      - "8082:8082"
    environment:
      - SERVER_PORT=8082
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_ADVERTISED_LISTENERS=kafka:9092
      - MONGODB_URI=mongodb://root:dbpassword@db-message:27017/admin?authSource=admin
      - JWT_SECRET=123456781234567812345678123456781234567812345678
    depends_on:
      - db-message
      - kafka
      - redis

  notification-service:
    build: ./notification_service
    container_name: notification-service
    ports:
      - "8083:8083"
    environment:
      - SERVER_PORT=8083
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_ADVERTISED_LISTENERS=kafka:9092
      - MONGODB_URI=mongodb://root:dbpassword@db-message:27017/admin?authSource=admin
      - JWT_SECRET=123456781234567812345678123456781234567812345678
    depends_on:
      - db-message
      - kafka
      - redis

  file-storage-service:
    build: ./file_storage_service
    container_name: file-storage-service
    ports:
      - "8084:8084"
    environment:
      - SERVER_PORT=8084
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=chat-files
    depends_on:
      - minio

  db-auth:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: DBPASSWORD
    ports:
      - "5435:5432"

  db-message:
    image: mongo:latest
    container_name: db-message
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: dbpassword
    ports:
      - "27017:27017"
    volumes:
      - message_db_data:/data/db

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9002:9000"
      - "9001:9091"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9091"
    volumes:
      - minio_data:/data

volumes:
  message_db_data:
  minio_data: